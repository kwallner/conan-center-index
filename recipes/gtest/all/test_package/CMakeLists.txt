cmake_minimum_required(VERSION 3.1.2)
project(test_package CXX)

include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()

find_package(GTest REQUIRED)

if (TEST_PACKAGE_VARIANT STREQUAL "conan_libs")
    conan_basic_setup()
elseif (TEST_PACKAGE_VARIANT STREQUAL "conan_targets")
    conan_basic_setup(TARGETS)
elseif (TEST_PACKAGE_VARIANT STREQUAL "conan_find_package")
    conan_basic_setup()
    find_package(GTest REQUIRED)
elseif (TEST_PACKAGE_VARIANT STREQUAL "conan_find_include")
    conan_basic_setup()
    include(${CMAKE_CURRENT_BINARY_DIR}/FindGTest.cmake)
elseif (TEST_PACKAGE_VARIANT STREQUAL "cmake_find_package")
    conan_basic_setup()
    find_package(GTest CONFIG REQUIRED)
else()
    message(FATAL_ERROR "Invalid test variant.")
endif()

if(WITH_MAIN)
    add_executable(${PROJECT_NAME} test_package.cpp)
else()
    add_executable(${PROJECT_NAME} main.cpp test_package.cpp)
endif()

set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "${PROJECT_NAME}-${TEST_PACKAGE_VARIANT}")
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 11)
if(WITH_GMOCK)
    target_compile_definitions(${PROJECT_NAME} PRIVATE WITH_GMOCK)
endif()

if (TEST_PACKAGE_VARIANT STREQUAL "conan_libs")
    target_link_libraries(${PROJECT_NAME} ${CONAN_LIBS})
else()
    if(WITH_MAIN)
        target_link_libraries(${PROJECT_NAME} GTest::gtest GTest::gtest_main )
        if(WITH_GMOCK)
            target_link_libraries(${PROJECT_NAME} GTest::gmock GTest::gmock_main)
        endif()
    else()
        target_link_libraries(${PROJECT_NAME} GTest::gtest)
        if(WITH_GMOCK)
            target_link_libraries(${PROJECT_NAME} GTest::gmock)
        endif()
    endif()
endif()
